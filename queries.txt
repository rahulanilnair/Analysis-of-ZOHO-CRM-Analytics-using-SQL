//
1. Show the contactid,lastname,contactowner from contacts having lastname as young and order by contactid:
     SELECT contactid,lastname,contactowner
     from contacts 
     having lastname='Young'
     ORDER BY CONTACTID
2.Sales Cycle Time(Age Tier)vs Sales Order Count:
	SELECT AGETIER,COUNT(SALESORDERID),STATUS FROM sales_orders GROUP BY AGETIER,STATUS HAVING STATUS<>'Created';

3.Which Invoice Status had the lowest Grand Total ? 
  SELECT InvoiceStatus,SUM(GrandTotal) FROM Invoices Group By InvoiceStatus HAVING InvoiceStatus<>'Invoice Status' ORDER BY InvoiceStatus LIMIT 1;
  
4. Show the name of users in ascending order who may or may not have an invoice .
	select distinct u.LastName as 'Name'  from invoices i 
	right join users u on u.USER_ID = i.InvoiceOwnerId
	where i.InvoiceStatus = 'cancelled'
	order by u.LastName;
	
5. Getting the grand total where status is created
	select  sum(cast(replace(GrandTotal, ',', '') as int))  as TotalGrandTotal from sales_orders
	where status = 'created';

6. Show unique campaign names where the lead to the potential was given by Harold Pawlan
	select distinct  c.campaignname from 
	campaigns c,
	potentials p,
	leads l 
	where 
	l.LEADID = p.LEADID AND
	p.CampaignID = c.CAMPAIGNID AND
	l.LeadOwner= 'Harold Pawlan';

7.  Show the names of subjects which have appeared at least twice.
	select distinct q.subject from quotes as q 
	where q.Subject in 
	(
    		select distinct Subject from quotes
    		group by Subject
    		having count(subject) > 1
   	 );

8.Show the names of ProductName in ascending order along with Quantity,NetTotal and ProductID.
         SELECT p.ProductName,p.Quantity,p.NetTotal,pu.PURCHASEORDERID from purchase_order_line_items p 
         JOIN purchase_orders pu  
         ON (p.NetTotal=pu.SubTotal) 
         ORDER BY p.ProductName ASC;
	
9.Show the LEADID,LeadSource,their status and individual counts for users with LEADID Between 1000 and 4000
	SELECT LEADID,LeadSource,LeadStatus,COUNT(LeadStatus) from leads 
	GROUP BY LeadSource,LeadStatus 
	HAVING LEADID>='1000' AND LEADID<='4000';
	
10.Give the Lead Source,number of Converted Leads and Leads involved in Activities for each Lead Source.
	SELECT l.LeadSource,COUNT(CASE WHEN l.CONVERTED='YES' THEN 1 END) AS CONVERTED,
	COUNT(CASE WHEN p.ActivitiesInvolved='Yes' THEN 1 END) AS INVOLVED FROM 
	leads l JOIN potentials p ON 
	(l.LEADID=p.LEADID) 
	GROUP BY LeadSource HAVING LeadSource<>'Lead Source'
	
11.Counting the number of leads involved in each campaign.
	SELECT ca.Type,COUNT(DISTINCT l.LEADID) from campaigns ca 
	JOIN campaign_lead_status cl ON (ca.CampaignName=cl.CampaignName) 
	JOIN leads l ON (cl.LeadLastName=l.LastName) 
	GROUP BY ca.Type HAVING ca.Type<>'Type';
	
12.Count the no. of open cases in each age tier for each case owner
	SELECT CaseOwner,COUNT(CASE WHEN STATUS<>'Çlosed' AND AgeTier='1. 0 - 60 days' THEN 1 END) AS I,
	COUNT(CASE WHEN STATUS<>'Closed' AND AgeTier='2. 61 - 120 days' THEN 1 END) AS II 
	from cases GROUP BY CaseOwner HAVING CaseOwner<>'Case Owner';
	
13.Show the Total Number of Leads,Converted Leads and Conversion % for each Lead Source.
	SELECT LeadSource,COUNT(LEADID) AS LEADSCOUNT,COUNT(CASE WHEN CONVERTED='YES' THEN 1 END) 
	AS CONVERTEDLEAD,(COUNT(CASE WHEN CONVERTED='YES' THEN 1 END)*100/COUNT(LEADID)) AS 
	CONVERSIONPERCENT from leads GROUP BY LeadSource HAVING LeadSource<>'Lead Source';
	
14.Show the User id,name and the number of tasks done by each Vendor Owner
	SELECT u.USER_ID,v.VendorOwner,COUNT(t.TaskOwner) from users u 
	JOIN vendors v ON (u.LastName=v.VendorOwner) 
	JOIN tasks t ON (t.TaskOwner=v.VendorOwner) 
	GROUP BY v.VendorOwner HAVING v.VendorOwner<>'Vendor Owner';
	
15.Show the average duration for each need stage for all open potentials.
	SELECT Stage,AVG(CASE WHEN ForecastType='Open' THEN AgeInDays ELSE 0 END) 
	AS AVGDURATION FROM potentials GROUP BY Stage HAVING Stage<>'Stage';
	
16.Count of open potentials by stage.
	SELECT STAGE,COUNT(CASE WHEN ForecastType='Open' THEN 1 END) 
	AS OPENPOTENTIAL from potentials GROUP BY STAGE HAVING STAGE<>'Stage';
	
17.Show the total no. of leads,converted leads,won and lost deals for each owner.
	SELECT l.LeadOwner,COUNT(l.LEADID) AS LEADCOUNT,COUNT(CASE WHEN l.CONVERTED='YES' THEN 1 END) AS CONVERTEDLEAD,
	COUNT(CASE WHEN p.ForecastType='Won' THEN 1 END) AS WONDEAL,
	COUNT(CASE WHEN p.ForecastType='Lost' THEN 1 END) AS LOSTDEAL 
	from leads l JOIN potentials p ON (l.LeadOwner=p.PotentialOwner) 
	GROUP BY l.LeadOwner HAVING l.LeadOwner<>'Lead Owner';

18.Find status ,created time and discount  from sales orders where the tax is minimum.
            SELECT Status,CreatedTime,Discount 
            FROM sales_orders 
            WHERE Tax= (SELECT MIN(Tax) 
            FROM sales_orders)

19.Find the status and maximum days to closed which are having maximum days of greater then 10 and group them according to case origin.
           SELECT Status, MAX(DaysToClosed)
           FROM cases
           GROUP BY CaseOrigin
           HAVING MAX(AgeInDays)>10;

20.Find average, maximum, minimum and sum total of amount where name Starts with Lew.
          SELECT AVG(Amount), MAX(Amount), MIN(Amount), SUM(Amount) 
          FROM potentials 
          WHERE PotentialName LIKE 'Lew%'
 
21.Update all the records of sales_orders table by increasing 10% of their Tax.
         UPDATE sales_orders 
         SET Tax=1.1*Tax

22.CHANGE accountOwnerId to 1000 FOR accountId between 2 and 10 IN account TABLE.
          update accounts set accountOwnerId=1000 
          where accountId BETWEEN 2 AND 10


23.List the Case Owners names  not having age in days as 10,30, or 40.
         SELECT DISTINCT CaseOwner FROM cases 
         WHERE NOT AgeInDays='30'AND 
         NOT AgeInDays='40'AND NOT AgeInDays='10';

24.List names of those TaskOwners who  joined between 30 Aug 81 and 31 oct 81.
         SELECT DISTINCT TaskOwner FROM tasks
         WHERE DueDate 
         BETWEEN '30-Aug81' AND '31-Oct-81'

25.List employees whose name either start or end with ‘s’.
         SELECT LastName FROM users
         WHERE LastName LIKE 'S%' 
         OR LastName LIKE '%S'

26.Sort Potentials table in ascending order by LEADID and Type, ForecastType, AgeInDays and AgeTier.
         SELECT Type,ForecastType,AgeInDays 
         FROM potentials ORDER BY LEADID;


27.Find the all  taskid and the call starttime  where accountid is in the range 1000 to 1500.
          SELECT TASKID, CallStartTime FROM calls 
          WHERE Callowner< ALL 
          (SELECT Callowner FROM calls 
          WHERE ACCOUNTID BETWEEN 1000 AND 1500)
	 

